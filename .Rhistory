df1 = rbind(df1,result1)
}
#filter out all the shit whose cosign>=0.1 after coauthor check
current_df = df1[df1$cosine<0.1,]
firstInitial_table1=argument1_df$Fname[argument1_df$Lname==as.character(current_df$s1name[1])]
firstInitial_table2=argument2_df$Fname[argument2_df$Lname==as.character(current_df$s2name[1])]
result_firstInitial_1 = fuzzy1(firstInitial_table1,firstInitial_table2)
if(!is.na(result_firstInitial_1$cosine[1])&result_firstInitial_1$cosine[1]<0.1 &
length(result_firstInitial_1$cosine) == 1)
{
print ("SECOND IF!!! If fName and lname match is good after checking co-authors ") # for checking purposes
merged_author_list1 = data.frame(  patentAuthorLname = as.character(current_df$s1name[1])
,patentAuthorFname = as.character(result_firstInitial_1$s1name[1])
,refAuthorLname = as.character(current_df$s2name[1])
,refentAuthorFname = as.character(result_firstInitial_1$s2name[1])
,patentNumber = a$patent_no[a$Fname==as.character(result_firstInitial_1$s1name[1]) &
a$Lname==as.character(current_df$s1name[1])]
,unique_id = b$unique_id[b$Fname==as.character(result_firstInitial_1$s2name[1]) &
b$Lname==as.character(current_df$s2name[1])]
)
l1 = list(final_list,merged_author_list1)
final_list = rbindlist(l1)
}
else
#these are the guys with no match as far as cosine is set
{
print("TBD.Under construction if fname and lname of coauthor are not cosign>0.1 v...run the third author match? ")
# this is where the third author match is done, which is to be included in the later versions.
}
}#else end
} # Main for loop end
final_list
final_list
a
b
final_list
fuzzy1(x,y)
library(stringdist)
library(reshape2)
library(data.table)
dist.methods<-list()
fuzzy1(x,y)
fuzzy("bratt","bratt jr")
fuzzy1("bratt","bratt jr")
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"),fuzzy1("James","Jamez"))
fuzzy1 <- function(a,b)
{
a1 = as.character(a)
b1 = as.character(b)
dist.a1b1<-adist(a1,b1, partial = TRUE, ignore.case = TRUE)
distance.methods<-c('osa','lv','dl','hamming','lcs','qgram','cosine','jaccard','jw','soundex') #define methods to calculate the distance of two strings
dist.methods<-list()
#Fuzz 1###########
for(m in 1:length(distance.methods))
{
dist.name.enh<-matrix(NA, ncol = length(b1),nrow = length(a1))
for(i in 1:length(b1)) {
for(j in 1:length(a1)) {
dist.name.enh[j,i]<-stringdist(tolower(b1[i]),tolower(a1[j]),method = distance.methods[m])
#adist.enhance(source2.devices[i,]$name,source1.devices[j,]$name)
}
}
dist.methods[[distance.methods[m]]]<-dist.name.enh
}
match.s1.s2.enh<-NULL # what is that?
for(m in 1:length(dist.methods))
{
dist.matrix<-as.matrix(dist.methods[[distance.methods[m]]])
min.name.enh<-apply(dist.matrix, 1, base::min)
for(i in 1:nrow(dist.matrix))
{
s2.i<-match(min.name.enh[i],dist.matrix[i,])
s1.i<-i
match.s1.s2.enh<-rbind(data.frame(s2.i=s2.i,s1.i=s1.i,s2name=b1[s2.i],s1name=a1[s1.i], adist=min.name.enh[i],method=distance.methods[m]),match.s1.s2.enh)
}
}
# Let's have a look at the results
matched.names.matrix<-dcast(match.s1.s2.enh,s2.i+s1.i+s2name+s1name~method, value.var = "adist")
Fuzzy1 = matched.names.matrix
return(Fuzzy1)
}
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Robert","Roberts"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
adist("bratt","bratt iii")
adist("bratt","bratt iii")
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
list.co.auths
list.auths
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
indexes
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
list.co.auths
list.tmp<-list()
list.tmp[[1]]<-"Jaymie"
grep(list.tmp,list.co.auths)
list.tmp[[2]]<-"Lebron"
grep(list.tmp,list.co.auths)
grep(list.tmp,list.co.auths)
list.co.auths
grep(list.tmp[[1]],list.co.auths[[1]])
grep(list.tmp[[2]],list.co.auths[[1]])
list.tmp[[1]]<-c("Jaymie", "Deon")
grep(list.tmp[[1]],list.co.auths[[1]])
list.tmp[[1]]
list.co.auths[[1]]
grep(list.tmp[[1]],list.co.auths[[1]])
grep(list.tmp[[1]],list.co.auths[[1]])
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
indexes
list.co.auths[[1]]
indexes <- sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
indexes
list.tmp[[2]]<-"Jaymie"
list.tmp[[1]]<-c("Jaymie", "Deon")
indexes <- sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
class(sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
)
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
unlist(tmp2)
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
tmp2
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
tmp2
unlist(tmp2)
Reduce(tmp2)
?Reduce
Reduce("+",tmp2)
tmp2
Reduce("+",unlist(tmp2))
list.auths1 <- c("Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina")
list.auths1
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
con<-dbConnect(MySQL(),user="GenBankUser", password="123GenBank456",host="metadatalab.syr.edu", dbname="genbank")
test<-dbGetQuery(con, "SELECT COUNT(*), r.* FROM test.par_PatentReference as r
WHERE patenttype NOT LIKE 'US'
GROUP BY patentNumber
LIMIT 1000000 ;")
t<-table(test$`COUNT(*)`)
#View(t)
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
install.packages("dbConnect")
library(dbConnect)
con<-dbConnect(MySQL(),user="GenBankUser", password="123GenBank456",host="metadatalab.syr.edu", dbname="genbank")
test<-dbGetQuery(con, "SELECT COUNT(*), r.* FROM test.par_PatentReference as r
WHERE patenttype NOT LIKE 'US'
GROUP BY patentNumber
LIMIT 1000000 ;")
t<-table(test$`COUNT(*)`)
#View(t)
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
t<-table(test$`COUNT(*)`)
u<-test[which(test$`COUNT(*)`>10000),]
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
library(reshape2)
N_test<-f[,c(1:51)]
N_test<-f[,c(1:51)]
unique.auths
View(unique.auths)
View(unique.auths)
df<-read.csv("sample.csv")
df
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names = X)
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names = TRUE)
?read.csv
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =1 )
df
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =2 )
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =0)
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =1)
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == gsub("\\..*","",df$Author[x]) )]
l <- list(authors)
l
}
l
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == gsub("\\..*","",df$Author[x]) )]
l <- list(authors)
l
}
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list
dim(df)[1]
dim(df)[1]
dim(df)[1]
dim(df)[1]
dim(df)[1]
?lapply
dim(df)
gsub("\\..*","",df$Author[x])
gsub("\\..*","",df$Author[1])
df$Author[1]
df$Author
df$Author[1]
gsub("\\..*","",df$Author[1])
df$Author[4]
gsub("\\..*","",df$Author[4])
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == df$authorfl[x] )]
l <- list(authors)
l
}
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list
unlist(co.auth.list)
co.auth.list[1]
co.auth.list[2]
df$coauthor<-co.auth.list
df
View(df)
?lappy
lapply(co.auth.list,unlist())
?lapply
lapply(co.auth.list,unlist)
co.auth.list<-lapply(co.auth.list,unlist)
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list2<-lapply(co.auth.list,unlist)
co.auth.list2
co.auth.list
df$coauthor<-co.auth.list2
View(df)
df[6,]
class(df$unique_id)
View(df)
disambReference<-read.csv('data/disambReference_sample.csv')
disambIntlpatref<-read.csv('data/disambIntlpatref_sample.csv')
head(disambReference)
head(disambReference)
disambReference<-read.csv('data/disambReference_sample.csv',row.names = 1)
head(disambReference)
disambIntlpatref<-read.csv('data/disambIntlpatref_sample.csv',row.names = 1)
?read.csv
head(disambReference)
f <- function(x) {
b<-sapply(X = x[[9]], FUN = function (X) { grep(X, x[[16]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
f <- function(x) {
b<-sapply(X = x[[9]], FUN = function (X) { grep(X, x[[16]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
f <- function(x) {
b<-sapply(X = x[[9]], FUN = function (X) { grep(X, x[[16]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
}
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1
coauthor.x['coauthor.x']
match1['coauthor.x']
match1
f <- function(x) {
b<-sapply(X = x[[['coauthor.x']]], FUN = function (X) { grep(X, x[[
```{r}
```{r}
```{r}
```{r}
f <- function(x) {
b<-sapply(X = x['coauthor.x'], FUN = function (X) { grep(X, x[
'coauthor.y'], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
}
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
coauthor.x$nummatch<-apply(match1, 1, f)
f <- function(x) {
b<-sapply(X = x[[8]], FUN = function (X) { grep(X, x[[15]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
}
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
coauthor.x$nummatch<-apply(match1, 1, f)
coauthor.x$nummatch<-apply(match1, 1, f)
f <- function(x) {
b<-sapply(X = x[[8]], FUN = function (X) { grep(X, x[[15]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
}
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
coauthor.x$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
f <- function(x) {
b<-sapply(X = x[[8]], FUN = function (X) { grep(X, x[[15]], ignore.case = TRUE, fixed = TRUE, perl=FALSE) }, simplify = "array")
return (length(unlist(b)))
}
apply(match1, 1, f)
apply(match1, 1, f)
apply(match1, 1, f)
apply(match1, 1, f)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
match1
# Parsing Cleaning Munging ReferencePatent table
## Objective:
We are trying to parse the original ReferencePatent table into a final output table, which contains the following attributes: id, authors (original field), title, patentType (e.g. EP, US, GB), PatentNumber (e.g. 0238993), version (e.g. -A2 1), patentDay, PatentMonth, PatentYear, extra_journal (the leftover data that comes after the semi-colon or that is  not any of the previously indicated patent data), and then the parsed author names (one per column (e.g. Author 1, Author 2, Author 3).
# Parsing Cleaning Munging ReferencePatent table
## Objective:
We are trying to parse the original ReferencePatent table into a final output table, which contains the following attributes: id, authors (original field), title, patentType (e.g. EP, US, GB), PatentNumber (e.g. 0238993), version (e.g. -A2 1), patentDay, PatentMonth, PatentYear, extra_journal (the leftover data that comes after the semi-colon or that is  not any of the previously indicated patent data), and then the parsed author names (one per column (e.g. Author 1, Author 2, Author 3).
install.packages("splitstackshape")
### Transpose the Author column:
For an author cell like
| Author                            |   |
|-----------------------------------|---|
| 'Kozlov,J.I.' 'Naroditskaya,V.A.' |   |
we want to separate it into two separate cells
| Author                            | Author1     | Author2             |
|-----------------------------------|-------------|---------------------|
| 'Kozlov,J.I.' 'Naroditskaya,V.A.' | Kozlov,J.I. | 'Naroditskaya,V.A.' |
```{r}
#Create a new dataframe for this task:
pat<-as.data.frame(ReferencePatent$authors)
#Write a for loop to populate the tranposed author columns
for (i in 1:max(unlist(lapply(authorsplit, function(x) length(x))))){
eval(parse(text = paste0('pat$Author', i, ' <- sapply(authorsplit,function(x) x[i])')))
}
head(pat)
```
### Parse content out of the journal column:
```{r}
#1. parse patentType out of journal column
head(ReferencePatent$journal,10)
#sub "\t" and split the journal column by ' '
journal<-strsplit(gsub("\t", " ", ReferencePatent$journal, fixed=TRUE)," ")
head(journal,10)
#the second part of each row of 'journal' list is the patenttype that we need
pat$patentType<-sapply(journal,function(x) x[2])
head(refdf$patentType,10)
#2. parse patent number out of journal column
head(journal)
patentNumber<-strsplit(sapply(journal,function(x) x[3]), "-")
pat$patentNumber<-sapply(patentNumber,function(x) x[[1]])
head(refdf$patentNumber)
#3. parse patentVersion (something like -A2 1) out of journal column
head(journal)
version1<-sapply(patentNumber,function(x) x[2])
head(version1)
version2<-sapply(journal,function(x) x[4])
head(version2)
#mapply is kind of like zip in python
version3<-mapply(c, version1, version2, SIMPLIFY=FALSE)
#head(version3)
pat$patentVersion<-as.vector(sapply(version3,function(x) paste(x[1],x[2])))
head(pat$patentVersion)
#4. patentDay, patentmonth, patent year (requires 'lubridate')
head(journal)
fulldate<-dmy(sapply(journal,function(x) x[5]))
pat$patentYear<-year(fulldate)
pat$patentMonth<-month(fulldate)
pat$patentDay<-day(fulldate)
#5. split the journal column on the first occrence of ";\t" to get extra portion of the journal
patentExtra<-as.vector(colsplit(ReferencePatent$journal,";\t",c("a","b"))[2])
pat$patentExtra<-patentExtra$b
head(pat$patentExtra)
#Final Results
head(pat)
pat<-as.data.frame(ReferencePatent$authors)
match1<-merge(disambReference, disambIntlpatref, by.x = c("Fname","Lname"), by.y = c("Fname","Lname"), all.x = FALSE, all.y = FALSE)
match1$nummatch<-apply(match1, 1, f)
