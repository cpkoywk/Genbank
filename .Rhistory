,patentNumber = a$patent_no[a$Fname==as.character(result_firstInitial_1$s1name[1]) &
a$Lname==as.character(current_df$s1name[1])]
,unique_id = b$unique_id[b$Fname==as.character(result_firstInitial_1$s2name[1]) &
b$Lname==as.character(current_df$s2name[1])]
)
l = list(final_list,merged_author_list)
final_list = rbindlist(l)
}
#If there is more than one match in the table (a)?
# Now we get into the co-authors. This else represents that there are more than one author(s) with a similar lastname/first initial combination, so we move on to the co-authors.
else #else if the same combination appears twice, we check for co-authors
{
print ("first else (run this to check co-author))")
# To get the co-author list, we simply take the authors with the same patent numbers or unique_ids
# To get all the authors from table1 with same patent number
currentPatentNumber = a$patent_no[a$Lname == as.character(argument1)]
argument1_df = a[a$patent_no == currentPatentNumber,]
argument1 = argument1_df$Lname[argument1_df$Lname != as.character(argument1)][1]
# Same with table 2
currentUnique_id = b$unique_id[b$Lname == as.character(argument2)]
argument2_df = b[b$unique_id == currentUnique_id,]
argument2 = argument2_df$Lname[argument2_df$Lname != as.character(argument2)][1]
result1 = fuzzy1(argument1,argument2)
df1 = result1[0,] # Again, For copying the df structure
# Next step is similar to the previous ones. We match the lastnames, then firstnames and if those are similar and have more than one entry then we move onto the third author match and so on
for(k in 1:length(argument2_df$unique_id))
{print(paste0("third for loop, continue to checking co authors?"))
argument2 = argument2_df$Lname[k]
result1 = fuzzy1(argument1,argument2)
df1 = rbind(df1,result1)
}
#filter out all the shit whose cosign>=0.1 after coauthor check
current_df = df1[df1$cosine<0.1,]
firstInitial_table1=argument1_df$Fname[argument1_df$Lname==as.character(current_df$s1name[1])]
firstInitial_table2=argument2_df$Fname[argument2_df$Lname==as.character(current_df$s2name[1])]
result_firstInitial_1 = fuzzy1(firstInitial_table1,firstInitial_table2)
if(!is.na(result_firstInitial_1$cosine[1])&result_firstInitial_1$cosine[1]<0.1 &
length(result_firstInitial_1$cosine) == 1)
{
print ("SECOND IF!!! If fName and lname match is good after checking co-authors ") # for checking purposes
merged_author_list1 = data.frame(  patentAuthorLname = as.character(current_df$s1name[1])
,patentAuthorFname = as.character(result_firstInitial_1$s1name[1])
,refAuthorLname = as.character(current_df$s2name[1])
,refentAuthorFname = as.character(result_firstInitial_1$s2name[1])
,patentNumber = a$patent_no[a$Fname==as.character(result_firstInitial_1$s1name[1]) &
a$Lname==as.character(current_df$s1name[1])]
,unique_id = b$unique_id[b$Fname==as.character(result_firstInitial_1$s2name[1]) &
b$Lname==as.character(current_df$s2name[1])]
)
l1 = list(final_list,merged_author_list1)
final_list = rbindlist(l1)
}
else
#these are the guys with no match as far as cosine is set
{
print("TBD.Under construction if fname and lname of coauthor are not cosign>0.1 v...run the third author match? ")
# this is where the third author match is done, which is to be included in the later versions.
}
}#else end
} # Main for loop end
final_list
a = data.table(a)
b = data.table(b)
# Structure for final author list:
merged_author_list_temp = data.frame(   patentAuthorLname = as.character(a$Lname[1])
,patentAuthorFname = as.character(a$Fname[1])
,refAuthorLname = as.character(b$Lname[1])
,refentAuthorFname = as.character(b$Fname[1])
,patentNumber = a$patent_no[1]
,unique_id = b$unique_id[1]
)
# Here we define the final list where we will put all the matched authors and this will form a connection bridge between the two tables.
final_list = merged_author_list_temp[0,]
final_list = data.table(final_list) #it's just an empty dataframe with colnames
# The main loop:
# This loop controls the row flow of the main dataset. Suppose dataframe a (patref) has 100 rows then this loop will run 100 times.
for(i in 1:length(a$patent_no))
{
print(paste0("mainloop:",i,' ',a$Lname[i])) # Necessary only if you want to keep track of the progress,
# First, we will take the main author of the Patent in dataframe a, and match its last name with all the last names in dataframe b.
argument1 = a$Lname[i]
argument2 = b$Lname[i]
result = fuzzy1(argument1,argument2) # First result
df = result[0,] # For copying the df structure
# For loop to check the matches between L_name in 1st table with all L_names in 2nd table
# Here, we will loop through the entire length of dataframe b and try to match the last names with the current last name in dataframe a.
for(j in 1:length(b$unique_id)) # Loops through b
{
#print(paste0("secondary for loop",j))
argument2 = b$Lname[j] #the LName column from ref
result = fuzzy1(argument1,argument2) # Stores all the cosine values of all the matches
df = rbind(df,result)
}
# Now, since we only want similar last names:
# Once we have all the values, we will filter them out to keep only the similar last names. Due to the errors in names and other problems we will set a threshold of 0.2 in this case.
#This means that we will pass all the author names which are somewhat similar too. For example, a threshold value of 0.2 will pass George and georg as same authors. You can change the value depending on the requirement.
current_df = df[df$cosine<0.2,]
# Filtering process.
# If the lnames are similar enough (cosine<0.2), lets check if the first initial matches:
# Once we know that the last names are similar, we can move on to the first names/initials. We follow the same process to match the first initials.
firstInitial_table1 = a$Fname[a$Lname == as.character(current_df$s1name[1])]
firstInitial_table2 = b$Fname[b$Lname == as.character(current_df$s2name[1])]
# Fuzzy match for Fnames having the same Lnames
result_firstInitial_1 = fuzzy1(firstInitial_table1,firstInitial_table2)
# Now, if:
#1. the firstname match is good enough
# 2. there is just one entry in the table,
#then we can say that the two authors from diff table are the same. Only one entry in the table means that there is an unique match and we do not need to match for co-authors.
#Hereâ€™s how we specify that in R:
if(!is.na(result_firstInitial_1$cosine[1])&result_firstInitial_1$cosine[1]<0.2&  length(result_firstInitial_1$cosine)==1)
{
print("first if-if fName match is good after filtering out bad-matched lastname")
# Let's create a final merged author list, all the final matched authors will go into this list
# Make sure to get the patent number and unique_id directly from the original dataframes. In fact, that is the only way to retrieve the ids, since we are matching just the strings, we need to use that to trace back and get the unique_id and patent number.
merged_author_list = data.frame(  patentAuthorLname = as.character(current_df$s1name[1]),patentAuthorFname = as.character(result_firstInitial_1$s1name[1]),refAuthorLname = as.character(current_df$s2name[1])
,refentAuthorFname = as.character(result_firstInitial_1$s2name[1])
,patentNumber = a$patent_no[a$Fname==as.character(result_firstInitial_1$s1name[1]) &
a$Lname==as.character(current_df$s1name[1])]
,unique_id = b$unique_id[b$Fname==as.character(result_firstInitial_1$s2name[1]) &
b$Lname==as.character(current_df$s2name[1])]
)
l = list(final_list,merged_author_list)
final_list = rbindlist(l)
}
#If there is more than one match in the table (a)?
# Now we get into the co-authors. This else represents that there are more than one author(s) with a similar lastname/first initial combination, so we move on to the co-authors.
else #else if the same combination appears twice, we check for co-authors
{
print ("first else (run this to check co-author))")
# To get the co-author list, we simply take the authors with the same patent numbers or unique_ids
# To get all the authors from table1 with same patent number
currentPatentNumber = a$patent_no[a$Lname == as.character(argument1)]
argument1_df = a[a$patent_no == currentPatentNumber,]
argument1 = argument1_df$Lname[argument1_df$Lname != as.character(argument1)][1]
# Same with table 2
currentUnique_id = b$unique_id[b$Lname == as.character(argument2)]
argument2_df = b[b$unique_id == currentUnique_id,]
argument2 = argument2_df$Lname[argument2_df$Lname != as.character(argument2)][1]
result1 = fuzzy1(argument1,argument2)
df1 = result1[0,] # Again, For copying the df structure
# Next step is similar to the previous ones. We match the lastnames, then firstnames and if those are similar and have more than one entry then we move onto the third author match and so on
for(k in 1:length(argument2_df$unique_id))
{print(paste0("third for loop, continue to checking co authors?"))
argument2 = argument2_df$Lname[k]
result1 = fuzzy1(argument1,argument2)
df1 = rbind(df1,result1)
}
#filter out all the shit whose cosign>=0.1 after coauthor check
current_df = df1[df1$cosine<0.1,]
firstInitial_table1=argument1_df$Fname[argument1_df$Lname==as.character(current_df$s1name[1])]
firstInitial_table2=argument2_df$Fname[argument2_df$Lname==as.character(current_df$s2name[1])]
result_firstInitial_1 = fuzzy1(firstInitial_table1,firstInitial_table2)
if(!is.na(result_firstInitial_1$cosine[1])&result_firstInitial_1$cosine[1]<0.1 &
length(result_firstInitial_1$cosine) == 1)
{
print ("SECOND IF!!! If fName and lname match is good after checking co-authors ") # for checking purposes
merged_author_list1 = data.frame(  patentAuthorLname = as.character(current_df$s1name[1])
,patentAuthorFname = as.character(result_firstInitial_1$s1name[1])
,refAuthorLname = as.character(current_df$s2name[1])
,refentAuthorFname = as.character(result_firstInitial_1$s2name[1])
,patentNumber = a$patent_no[a$Fname==as.character(result_firstInitial_1$s1name[1]) &
a$Lname==as.character(current_df$s1name[1])]
,unique_id = b$unique_id[b$Fname==as.character(result_firstInitial_1$s2name[1]) &
b$Lname==as.character(current_df$s2name[1])]
)
l1 = list(final_list,merged_author_list1)
final_list = rbindlist(l1)
}
else
#these are the guys with no match as far as cosine is set
{
print("TBD.Under construction if fname and lname of coauthor are not cosign>0.1 v...run the third author match? ")
# this is where the third author match is done, which is to be included in the later versions.
}
}#else end
} # Main for loop end
final_list
final_list
a
b
final_list
fuzzy1(x,y)
library(stringdist)
library(reshape2)
library(data.table)
dist.methods<-list()
fuzzy1(x,y)
fuzzy("bratt","bratt jr")
fuzzy1("bratt","bratt jr")
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"),fuzzy1("James","Jamez"))
fuzzy1 <- function(a,b)
{
a1 = as.character(a)
b1 = as.character(b)
dist.a1b1<-adist(a1,b1, partial = TRUE, ignore.case = TRUE)
distance.methods<-c('osa','lv','dl','hamming','lcs','qgram','cosine','jaccard','jw','soundex') #define methods to calculate the distance of two strings
dist.methods<-list()
#Fuzz 1###########
for(m in 1:length(distance.methods))
{
dist.name.enh<-matrix(NA, ncol = length(b1),nrow = length(a1))
for(i in 1:length(b1)) {
for(j in 1:length(a1)) {
dist.name.enh[j,i]<-stringdist(tolower(b1[i]),tolower(a1[j]),method = distance.methods[m])
#adist.enhance(source2.devices[i,]$name,source1.devices[j,]$name)
}
}
dist.methods[[distance.methods[m]]]<-dist.name.enh
}
match.s1.s2.enh<-NULL # what is that?
for(m in 1:length(dist.methods))
{
dist.matrix<-as.matrix(dist.methods[[distance.methods[m]]])
min.name.enh<-apply(dist.matrix, 1, base::min)
for(i in 1:nrow(dist.matrix))
{
s2.i<-match(min.name.enh[i],dist.matrix[i,])
s1.i<-i
match.s1.s2.enh<-rbind(data.frame(s2.i=s2.i,s1.i=s1.i,s2name=b1[s2.i],s1name=a1[s1.i], adist=min.name.enh[i],method=distance.methods[m]),match.s1.s2.enh)
}
}
# Let's have a look at the results
matched.names.matrix<-dcast(match.s1.s2.enh,s2.i+s1.i+s2name+s1name~method, value.var = "adist")
Fuzzy1 = matched.names.matrix
return(Fuzzy1)
}
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt III"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Lannister","Lanister"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
rbind(fuzzy1("Robert","Roberts"),fuzzy1("bratt","bratt jr"),fuzzy1("bratt","bratt iii"),fuzzy1("James","Jamez"))
adist("bratt","bratt iii")
adist("bratt","bratt iii")
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
list.co.auths
list.auths
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
indexes
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
fifty.names <- c("Georgina","Gustavo","Simonne","Birgit","Santos","Jaymie","Jed","Stephaine","Felisha","Linn","Eddy","Sherwood","Katrice"
,"Luella","Loreta","Verlie","Dirk","Candi","Pattie","Tomeka","Karry","Phebe","My","Roseline","Mae","Adelia","Audie"
,"Yolanda","Charissa","Lupita","Neely","Mireya","Erich","Marcus","Melvina","Diana","Saturnina","Efrain","Mickie","Abram"
,"Verda","Carmelina","Barb","Deon","Faustina","Nilsa","Geralyn","Heidy","John","Mercedes")
# first, lets make a random list of vectors of names
num.list.items <- 10
list.auths <- sample(fifty.names, size = num.list.items)
list.auths
list.co.auths <- lapply(1:num.list.items, function(x) sample(fifty.names, size = sample(2:8, size = 1)))
list.co.auths
for (i in 1:num.list.items) {
# now find those co-auths in a bigger list and get the index of their positions
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, fifty.names, ignore.case = TRUE) }, simplify = "array")
print(paste0("Auth (", i, "): ", list.auths[i], ":: co-Auths: ", paste(list.co.auths[[i]], collapse = ","), ":: Matched Names: ", paste(fifty.names[indexes], collapse = ",")))
# now we might do something with the matched values
}
list.co.auths
list.tmp<-list()
list.tmp[[1]]<-"Jaymie"
grep(list.tmp,list.co.auths)
list.tmp[[2]]<-"Lebron"
grep(list.tmp,list.co.auths)
grep(list.tmp,list.co.auths)
list.co.auths
grep(list.tmp[[1]],list.co.auths[[1]])
grep(list.tmp[[2]],list.co.auths[[1]])
list.tmp[[1]]<-c("Jaymie", "Deon")
grep(list.tmp[[1]],list.co.auths[[1]])
list.tmp[[1]]
list.co.auths[[1]]
grep(list.tmp[[1]],list.co.auths[[1]])
grep(list.tmp[[1]],list.co.auths[[1]])
indexes <- sapply(X = list.co.auths[[i]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
indexes
list.co.auths[[1]]
indexes <- sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
indexes
list.tmp[[2]]<-"Jaymie"
list.tmp[[1]]<-c("Jaymie", "Deon")
indexes <- sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp, ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
class(sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
)
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
unlist(tmp2)
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[2], ignore.case = TRUE) }, simplify = "array")
tmp2
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
tmp2<-sapply(X = list.co.auths[[1]], FUN = function (X) { grep(X, list.tmp[1], ignore.case = TRUE) }, simplify = "array")
tmp2
unlist(tmp2)
Reduce(tmp2)
?Reduce
Reduce("+",tmp2)
tmp2
Reduce("+",unlist(tmp2))
list.auths1 <- c("Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina","Georgina")
list.auths1
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
con<-dbConnect(MySQL(),user="GenBankUser", password="123GenBank456",host="metadatalab.syr.edu", dbname="genbank")
test<-dbGetQuery(con, "SELECT COUNT(*), r.* FROM test.par_PatentReference as r
WHERE patenttype NOT LIKE 'US'
GROUP BY patentNumber
LIMIT 1000000 ;")
t<-table(test$`COUNT(*)`)
#View(t)
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
install.packages("dbConnect")
library(dbConnect)
con<-dbConnect(MySQL(),user="GenBankUser", password="123GenBank456",host="metadatalab.syr.edu", dbname="genbank")
test<-dbGetQuery(con, "SELECT COUNT(*), r.* FROM test.par_PatentReference as r
WHERE patenttype NOT LIKE 'US'
GROUP BY patentNumber
LIMIT 1000000 ;")
t<-table(test$`COUNT(*)`)
#View(t)
u<-test[which(test$`COUNT(*)`>10000),]
#View(head(unique.auths))
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
#nrow(unique.auths)
#Format authors so we have one author per line: TRANSPOSE TIME.
library(reshape2)
N_test<-f[,c(1:51)]
N_long = melt(N_test, id.vars=c("row_names"))
View(head(N_long))
rm(N_test)
#cleaning
library(splitstackshape)
a=cSplit(N_long, "value", sep=",")
View(head(a))
a$value_2<-substr(a$value_2,1,1)
a$variable<-gsub("Author", "", a$variable)
max(a$variable)
colnames(a) = c("row_names","seq","Lname","Fname")
a=as.data.frame(a)
a<-a[,c("row_names","Lname","Fname","seq")]
#View(head(a))
t<-table(test$`COUNT(*)`)
u<-test[which(test$`COUNT(*)`>10000),]
unique.auths<-test[!duplicated(test$`ReferencePatent$authors`) ,]
library(reshape2)
N_test<-f[,c(1:51)]
N_test<-f[,c(1:51)]
unique.auths
View(unique.auths)
View(unique.auths)
df<-read.csv("sample.csv")
df
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names = X)
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names = TRUE)
?read.csv
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =1 )
df
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =2 )
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =0)
df<-read.csv("sample.csv",stringsAsFactors = FALSE,row.names =1)
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == gsub("\\..*","",df$Author[x]) )]
l <- list(authors)
l
}
l
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == gsub("\\..*","",df$Author[x]) )]
l <- list(authors)
l
}
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list
dim(df)[1]
dim(df)[1]
dim(df)[1]
dim(df)[1]
dim(df)[1]
?lapply
dim(df)
gsub("\\..*","",df$Author[x])
gsub("\\..*","",df$Author[1])
df$Author[1]
df$Author
df$Author[1]
gsub("\\..*","",df$Author[1])
df$Author[4]
gsub("\\..*","",df$Author[4])
FUN.co.auth.list <- function(x) {
# x <- 83 + 1
index <- which(df$unique_id == df$unique_id[x])
authors <- df$authorfl[index]
authors <- authors[-which(authors == df$authorfl[x] )]
l <- list(authors)
l
}
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list
unlist(co.auth.list)
co.auth.list[1]
co.auth.list[2]
df$coauthor<-co.auth.list
df
View(df)
?lappy
lapply(co.auth.list,unlist())
?lapply
lapply(co.auth.list,unlist)
co.auth.list<-lapply(co.auth.list,unlist)
co.auth.list <- lapply(1:dim(df)[1], FUN.co.auth.list)
co.auth.list2<-lapply(co.auth.list,unlist)
co.auth.list2
co.auth.list
df$coauthor<-co.auth.list2
View(df)
df[6,]
class(df$unique_id)
View(df)
