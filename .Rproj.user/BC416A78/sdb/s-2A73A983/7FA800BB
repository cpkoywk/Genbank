{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Week1: Parsing Cleaning Transforming ReferencePatent table\"\noutput:\n  pdf_document: default\n  html_notebook: default\n---\n\n```{r}\n#Load Necessary packages\nlibrary(reshape2)\nlibrary(plyr)\nlibrary(dbConnect)\n#library(ggplot2)\n#library(ggmap)\nlibrary(lubridate)\nlibrary('splitstackshape')\n\n```\n# Parsing Cleaning Transforming ReferencePatent table\n## Objective:\nWe are trying to parse the original ReferencePatent table into a final output table, which contains the following attributes: id, authors (original field), title, patentType (e.g. EP, US, GB), PatentNumber (e.g. 0238993), version (e.g. -A2 1), patentDay, PatentMonth, PatentYear, extra_journal (the leftover data that comes after the semi-colon or that is  not any of the previously indicated patent data), and then the parsed author names (one per column (e.g. Author 1, Author 2, Author 3). \n\n### Get the Reference Patent table from the SQL server\n```{r}\n#uncomment next line for the real thing\n#ReferencePatent<-dbGetQuery(con,'select * from genbank.ReferencePatent')\nReferencePatent<-read.csv('data/ReferencePatent1000.csv',row.names=1)\n```\n### Parse Author Column:\n```{r}\n#Split Author names of the real set\npaste(\"the original column:\")\nhead(ReferencePatent$authors,10)\n#eliminate \"\\t\"\nauthorsplit<-gsub(\"\\t\", \" \", ReferencePatent$authors, fixed=TRUE)\n#head(authorsplit)\n#eliminate \"and\"\nauthorsplit<-gsub(\" and \", \", \", authorsplit, fixed=TRUE)\n#head(authorsplit)\n#split it by \", \" because two author names are split by \", \"\nauthorsplit<-strsplit(authorsplit,\", \")\n#the number of authors the patent with most authors has\npaste(\"the number of authors the patent with most authors has:\", max(unlist(lapply(authorsplit, function(x) length(x)))))\n    \n#The result\npaste(\"the parsed column:\")\nhead(authorsplit)\n```\n### Transpose the Author column:\nFor an author cell like \n\n| Author                            |   |\n|-----------------------------------|---|\n| 'Kozlov,J.I.' 'Naroditskaya,V.A.' |   |\n\nwe want to separate it into two separate cells\n\n| Author                            | Author1     | Author2             |\n|-----------------------------------|-------------|---------------------|\n| 'Kozlov,J.I.' 'Naroditskaya,V.A.' | Kozlov,J.I. | 'Naroditskaya,V.A.' |\n```{r}\n#Create a new dataframe for this task:\npat<-as.data.frame(ReferencePatent$authors)\n#Write a for loop to populate the tranposed author columns\nfor (i in 1:max(unlist(lapply(authorsplit, function(x) length(x))))){\n  eval(parse(text = paste0('pat$Author', i, ' <- sapply(authorsplit,function(x) x[i])')))\n}\n\nhead(pat)\n```\n### Parse content out of the journal column:\n```{r}\n#1. parse patentType out of journal column\nhead(ReferencePatent$journal,10)\n#sub \"\\t\" and split the journal column by ' '\njournal<-strsplit(gsub(\"\\t\", \" \", ReferencePatent$journal, fixed=TRUE),\" \")\nhead(journal,10)\n#the second part of each row of 'journal' list is the patenttype that we need\npat$patentType<-sapply(journal,function(x) x[2])\nhead(pat$patentType,10)\n#2. parse patent number out of journal column\nhead(journal)\npatentNumber<-strsplit(sapply(journal,function(x) x[3]), \"-\")\npat$patentNumber<-sapply(patentNumber,function(x) x[[1]])\nhead(pat$patentNumber)\n#3. parse patentVersion (something like -A2 1) out of journal column\nhead(journal)\nversion1<-sapply(patentNumber,function(x) x[2])\nhead(version1)\nversion2<-sapply(journal,function(x) x[4])\nhead(version2)\n#mapply is kind of like zip in python\nversion3<-mapply(c, version1, version2, SIMPLIFY=FALSE)\n#head(version3)\npat$patentVersion<-as.vector(sapply(version3,function(x) paste(x[1],x[2])))\nhead(pat$patentVersion)\n#4. patentDay, patentmonth, patent year (requires 'lubridate')\nhead(journal)\nfulldate<-dmy(sapply(journal,function(x) x[5]))\npat$patentYear<-year(fulldate)\npat$patentMonth<-month(fulldate)\npat$patentDay<-day(fulldate)\n#5. split the journal column on the first occrence of \";\\t\" to get extra portion of the journal\npatentExtra<-as.vector(colsplit(ReferencePatent$journal,\";\\t\",c(\"a\",\"b\"))[2])\npat$patentExtra<-patentExtra$b\nhead(pat$patentExtra)\n#Final Results\nhead(pat)\n```\nWe are only going to need the \n\n# 2. Transforming Reference Table:\nParse the genbank.reference table in the same way I did the ReferencePatent Table: keep the id, title, journal, authororginal, author1,2,3,4,pubmed,year,reference\n\n```{r}\nReference<-dbGetQuery(con,'select * from genbank.Reference')\ncolnames(Reference)\ncolnames(parsedReference)\nparsedReference<-as.data.frame(Reference$id)\nparsedReference$title<-Reference$title\nparsedReference$reference<-Reference$reference\nparsedReference$origauthors<-Reference$authors\nparsedReference$consortium<-Reference$consortium\nparsedReference$journal<-Reference$journal\nparsedReference$pubmed<-Reference$pubmed\nparsedReference$remark<-Reference$remark\nparsedReference$year<-Reference$year\nparsedReference$new_id<-Reference$new_id\n\n'''",
    "created" : 1517442493637.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3153747884",
    "id" : "7FA800BB",
    "lastKnownWriteTime" : 1517458223,
    "last_content_update" : 1517458223681,
    "path" : "~/Library/Mobile Documents/com~apple~CloudDocs/iSchool Classes/Genbank/Week 1.Rmd",
    "project_path" : "Week 1.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}